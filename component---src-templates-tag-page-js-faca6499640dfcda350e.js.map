{"version":3,"sources":["webpack://gatsby-simple-blog/./src/components/PostAbbrev/PostAbbrev.js","webpack://gatsby-simple-blog/./src/components/SEO/SEO.js","webpack://gatsby-simple-blog/./src/components/TagList/TagList.js","webpack://gatsby-simple-blog/./src/templates/tag-page.js"],"names":["PostAbbrev","excerptPart","tagsPart","slug","title","date","timeToRead","excerpt","tags","base","dangerouslySetInnerHTML","__html","TagList","style","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","Link","boxShadow","color","to","rel","formatDate","formatReadingTime","defaultProps","SEO","description","meta","keywords","site","useStaticQuery","lang","useLang","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","restProps","className","map","text","key","Tag","url","kebabCase","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","siteTitle","homeLink","tagHeader","formatMessage","breadcrumbs","node","frontmatter","fields","marginTop"],"mappings":"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","file":"component---src-templates-tag-page-js-faca6499640dfcda350e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none', color:'var(--textLink)' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nfunction SEO({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n","import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { kebabCase } from 'utils/helpers';\nimport Tag from '../Tag';\n\nfunction TagList({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map((text) => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${kebabCase(text)}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { graphql } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Bio from 'components/Bio';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nconst TagPageTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n\n  const { lang, homeLink } = useLang();\n\n  const tagHeader = formatMessage('tfTagHeader', totalCount, tag);\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      breadcrumbs={[{ text: formatMessage('tTags'), url: `${homeLink}tags` }, { text: tag }]}\n    >\n      <SEO title={tagHeader} description={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <main>\n        {edges.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <PostAbbrev\n              key={node.fields.slug}\n              base={homeLink}\n              lang={lang}\n              slug={node.fields.slug}\n              date={node.frontmatter.date}\n              timeToRead={node.timeToRead}\n              title={title}\n            />\n          );\n        })}\n      </main>\n      <div style={{ marginTop: 50 }} />\n      <aside>\n        <Bio />\n      </aside>\n    </Layout>\n  );\n};\n\nTagPageTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n              langKey: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default TagPageTemplate;\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String, $langKey: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } }, fields: { langKey: { eq: $langKey } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}