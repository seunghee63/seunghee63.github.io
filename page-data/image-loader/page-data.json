{"componentChunkName":"component---src-templates-blog-post-js","path":"/image-loader/","result":{"data":{"site":{"siteMetadata":{"title":"양송이","author":"song2","lang":"ko"}},"markdownRemark":{"id":"c35696f1-1025-519e-b457-76b20ff35e77","excerpt":"안드로이드에서는 이미지를 로딩할 때 Picasso, Glide, Coil 과 같은 이미지 처리 라이브러리를 주로 사용한다. 구글도 Bitmap 관리의 복잡성을 근거로 Glide 사용을 권장하고 있다. 기존 Glide 를 사용하고 있던 프로젝트에 Coil 을 도입하는 과정에서, Coil…","html":"</br>\n<p>안드로이드에서는 이미지를 로딩할 때 Picasso, Glide, Coil 과 같은 이미지 처리 라이브러리를 주로 사용한다. 구글도 Bitmap 관리의 복잡성을 근거로 Glide 사용을 권장하고 있다.</p>\n<p>기존 Glide 를 사용하고 있던 프로젝트에 Coil 을 도입하는 과정에서, Coil 과 Glide 의 차이를 살펴보게 되었고 이미지 라이브러리들의 동작 원리 까지 학습한 후 가벼운 ImageLoader 를 구현해 보았다.</p>\n<p>함께 이해하고 구현해 보도록 하자.\n</br>\n</br></p>\n<h2 id=\"-overview\" style=\"position:relative;\"><a href=\"#-overview\" aria-label=\" overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>| overview</h2>\n<p>이미지 로더의 동작 과정은 다음과 같다.</p>\n<ol>\n<li>이미지 로딩 요청</li>\n<li>memory cache 에 bitmap 존재 여부 확인\n<ol>\n<li>존재하는 경우 해당 bitmap 사용</li>\n</ol>\n</li>\n<li>disk cache 의 bitmap 존재 여부 확인\n<ol>\n<li>존재하는 경우 해당 bitmap 사용 후, memory cache 에 저장</li>\n</ol>\n</li>\n<li>url 소스를 통해 sample size 의 bitmap 생성</li>\n<li>cache 에 저장</li>\n</ol>\n<p>해당 포스팅에서는 비트맵을 생성하고, 캐싱하고, bitmap 리사이징 하는 과정까지를 담아보았다.</p>\n<h2 id=\"이미지의-bitmap-관리\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-bitmap-%EA%B4%80%EB%A6%AC\" aria-label=\"이미지의 bitmap 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지의 Bitmap 관리</h2>\n<ul>\n<li>Bitmap : 이미지 표현을 위해 주로 사용되는 객체를 말한다.</li>\n<li>Bitmapfactory : 파일, stream, bite array 와 같은 다양한 소스에서 Bitmap 객체를 생성하는 클래스를 말한다.\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/graphics/BitmapFactory.Options?hl=ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BitmapFactory.Options</a> 클래스를 통해 디코딩 옵션을 지정한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cache\" style=\"position:relative;\"><a href=\"#cache\" aria-label=\"cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache</h2>\n<p>단순히 Bitmap 을 UI 에 보여주는 것은 어렵지 않지만, 한 번에 대용량의 이미지들을 로드하는것은 복잡하다.\n리스트 뷰의 경우, 아이템이 보이지 않을 때 메모리 사용량을 줄이는 방식으로 동작한다. GC 또한 더 이상 이미지를 참조하지 않을 것이라고 가정하고 비트맵을 해제한다. 그러나 이 방법은 빠른 ui 로딩이 어렵고 on-screen 시 매번 이미지 처리가 반복된다는 점에서 최적의 해결법으로 보기 힘들다.</p>\n<p>메모리 캐시와 디스크 캐시로 더 효율적으로 데이터를 관리 해 보자.</p>\n<h3 id=\"1-lru-class\" style=\"position:relative;\"><a href=\"#1-lru-class\" aria-label=\"1 lru class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) LRU Class</h3>\n<p>캐싱 작업에 앞서 LRU 알고리즘을 이해해 보자. LRU 알고리즘은 Least Recently Used 의 준말로, 최근에 가장 적게 참조된 원소를 제거하는 기법이다. 안드로이드에는 LruCache, DiskLruCache 가 있다.</p>\n<p>LruCache 는 비트맵 캐싱 작업에 적절한 메모리 캐시 객체이다. get() 메소드가 호출되면 cache의 top으로 아이템을 이동시킨다. 최근에 강한 참조로 참조된 객체를 LinkedHashMap 에 유지하고, 할당된 사이즈를 초과하기 전에 최근 가장 적게 사용된 멤버를 제거한다.</p>\n<p>LruCache 는 아래와 같이 구현되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> LRUCache extends LinkedHashMap<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> int maxSize<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">LRUCache</span><span class=\"token punctuation\">(</span>int capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxSize <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//return -1 if miss</span>\n    <span class=\"token keyword\">public</span> int <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>int key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Integer v <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> v <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>int key<span class=\"token punctuation\">,</span> int value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 조건을 만족하지 않는 경우, 가장 오래된 요소 삭제</span>\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">protected</span> boolean <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">//must override it if used in a fixed cache</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LinkedHashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> accessOrder<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>LinkedHashMap 의 생성자의 accessOrder 값을 true로 넘겨 순서 모드를 사용한다.</li>\n</ul>\n</br>\n</br>\n<p><strong>적절한 사이즈의 LruCache 사용</strong>을 위해 다음 요소들을 고려해야 한다.</p>\n<ul>\n<li>앱의 여유공간</li>\n<li>한 번에 화면에 보여지는 이미지의 개수/ 준비되어야 하는(곧 보여져야 하는) 이미지의 개수</li>\n<li>기기 해상도</li>\n<li>비트맵의 크기와 구성요소. 그에 따라 필요한 메모리.</li>\n<li>이미지 접근 빈도\n<ul>\n<li>특정 항목을 항상 메모리에 유지 or 여러 개의 LruCache 로 관리</li>\n</ul>\n</li>\n<li>질과 양의 균형\n<ul>\n<li>저품질의 많은 수의 비트맵을 저장하는 것이 유용할 수도 있음</li>\n</ul>\n</li>\n</ul>\n<p>LruCache 는 이 정도로 마치고, 이제 본격적으로 메모리 캐시 코드를 작성해보자.</p>\n<h3 id=\"2-memory-cache\" style=\"position:relative;\"><a href=\"#2-memory-cache\" aria-label=\"2 memory cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Memory Cache</h3>\n<p>메모리 캐시는 bitmap 에 대한 빠른 접근이 가능해 퍼포먼스 개선에 많은 도움이 된다. 하지만 앱 메모리를 차지한다는 단점이 있다. Cache 는 매우 작기때문에 <code class=\"language-text\">java.lang.OutOfMemory</code>를 야기하고, 다른 작업의 메모리 작업량을 조금밖에 남기지 못하기도 한다.</p>\n<ol>\n<li>LruCache 구성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ImageCache <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> memoryCache<span class=\"token operator\">:</span> LruCache<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Bitmap<span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">initializeCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 최적의 cache 사이즈 설정을 위한 로직 </span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initializeCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// kilobytes.</span>\n        <span class=\"token keyword\">val</span> maxMemory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">maxMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 메모리의 1/8 할당(일반 hdpi 장치에서 최소 4MB)</span>\n\t\t\t\t<span class=\"token keyword\">val</span> cacheSize <span class=\"token operator\">=</span> maxMemory <span class=\"token operator\">/</span> <span class=\"token number\">8</span>\n        memoryCache <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> LruCache<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Bitmap<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>cacheSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sizeOf</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> bitmap<span class=\"token operator\">:</span> Bitmap<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> bitmap<span class=\"token punctuation\">.</span>byteCount <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token comment\">//아이템 갯수X, kilobytes  </span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">addImage</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memoryCache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            memoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            memoryCache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>이미지가 로드 될 때, LruCache 확인</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>resId<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> imageUrl<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> imageCache<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span>resId<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> run <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> bmp <span class=\"token operator\">=</span> <span class=\"token function\">loadBitmap</span><span class=\"token punctuation\">(</span>imageUrl<span class=\"token punctuation\">)</span>\n            imageCache<span class=\"token punctuation\">.</span><span class=\"token function\">addImage</span><span class=\"token punctuation\">(</span>resId<span class=\"token punctuation\">,</span> bmp<span class=\"token punctuation\">)</span>\n            bmp\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>memory cache 의 접근 및 업데이트는 <em>background</em> 에서 이루어지도록 한다.</li>\n<li>샘플 이미지 사이즈를 측정하는 <code class=\"language-text\">calculateInSampleSize()</code> 메소드 구현부는 하단에 위치한다.</li>\n</ul>\n<h3 id=\"3-disk-cache\" style=\"position:relative;\"><a href=\"#3-disk-cache\" aria-label=\"3 disk cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Disk Cache</h3>\n<p>GridView 와 같은 큰 dataset 은 쉽게 메모리 캐시를 차지한다. 또한 다른 앱 작업(전화 통화)에 의해 앱이 중단될 경우, 백그라운드에서 종료되어 메모리 캐시가 소멸하게 되고 이를 다시 처리해야 하기도 한다.</p>\n<p>이때 Disk cache 를 사용하면 데이터를 유지하는 것이 가능하다. 단, 디스크에서 이미지를 가져오는 것은 디스크 읽기 시간을 예측하기 힘들기 때문에 백그라운드 스레드에서 수행해야 한다.</p>\n<p>다음은 기존 메모리 캐시에 디스크 캐시를 추가하는 업데이트된 예제 코드이다. (안드로이드 디벨로퍼 공식 예제와 동일하다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DISK_CACHE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token comment\">// 10MB</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> DISK_CACHE_SUBDIR <span class=\"token operator\">=</span> <span class=\"token string\">\"thumbnails\"</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> diskLruCache<span class=\"token operator\">:</span> DiskLruCache<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> diskCacheLock <span class=\"token operator\">=</span> <span class=\"token function\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> diskCacheLockCondition<span class=\"token operator\">:</span> Condition <span class=\"token operator\">=</span> diskCacheLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> diskCacheStarting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// Initialize memory cache</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// Initialize disk cache on background thread</span>\n    <span class=\"token keyword\">val</span> cacheDir <span class=\"token operator\">=</span> <span class=\"token function\">getDiskCacheDir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> DISK_CACHE_SUBDIR<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">InitDiskCacheTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> InitDiskCacheTask <span class=\"token operator\">:</span> AsyncTask<span class=\"token operator\">&lt;</span>File<span class=\"token punctuation\">,</span> Void<span class=\"token punctuation\">,</span> Void<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> params<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Void<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        diskCacheLock<span class=\"token punctuation\">.</span><span class=\"token function\">withLock</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> cacheDir <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            diskLruCache <span class=\"token operator\">=</span> DiskLruCache<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> DISK_CACHE_SIZE<span class=\"token punctuation\">)</span>\n            diskCacheStarting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// Finished initialization</span>\n            diskCacheLockCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Wake any waiting threads</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span>  BitmapWorkerTask <span class=\"token operator\">:</span> AsyncTask<span class=\"token operator\">&lt;</span>Int<span class=\"token punctuation\">,</span> Unit<span class=\"token punctuation\">,</span> Bitmap<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">// Decode image in background.</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> params<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> imageKey <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Check disk cache in background thread</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getBitmapFromDiskCache</span><span class=\"token punctuation\">(</span>imageKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span>\n                <span class=\"token comment\">// Not found in disk cache</span>\n                <span class=\"token function\">decodeSampledBitmapFromResource</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// Add final bitmap to caches</span>\n                            <span class=\"token function\">addBitmapToCache</span><span class=\"token punctuation\">(</span>imageKey<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">addBitmapToCache</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> bitmap<span class=\"token operator\">:</span> Bitmap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Add to memory cache as before</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getBitmapFromMemCache</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        memoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> bitmap<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Also add to disk cache</span>\n    <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span>diskCacheLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        diskLruCache<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> bitmap<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getBitmapFromDiskCache</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token operator\">=</span>\n        diskCacheLock<span class=\"token punctuation\">.</span><span class=\"token function\">withLock</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Wait while disk cache is started from background thread</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>diskCacheStarting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    diskCacheLockCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> InterruptedException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> diskLruCache<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Creates a unique subdirectory of the designated app cache directory. Tries to use external</span>\n<span class=\"token comment\">// but if not mounted, falls back on internal storage.</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getDiskCacheDir</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> uniqueName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> File <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Check if media is mounted or storage is built-in, if so, try and use external cache dir</span>\n    <span class=\"token comment\">// otherwise use internal cache dir</span>\n    <span class=\"token keyword\">val</span> cachePath <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>MEDIA_MOUNTED <span class=\"token operator\">==</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">getExternalStorageState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isExternalStorageRemovable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                context<span class=\"token punctuation\">.</span>externalCacheDir<span class=\"token punctuation\">.</span>path\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                context<span class=\"token punctuation\">.</span>cacheDir<span class=\"token punctuation\">.</span>path\n            <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>cachePath <span class=\"token operator\">+</span> File<span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> uniqueName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>UI 스레드에서 메모리 캐시를 확인하는 동안 백그라운드 스레드에서 디스크 캐시를 확인한다. 이미지 처리가 완료되면 나중에 사용할 수 있도록 비트맵이 메모리와 디스크 캐시에 모두 추가된다.</li>\n</ul>\n<h2 id=\"bitmap-최적화bitmap-resize\" style=\"position:relative;\"><a href=\"#bitmap-%EC%B5%9C%EC%A0%81%ED%99%94bitmap-resize\" aria-label=\"bitmap 최적화bitmap resize permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitmap 최적화(Bitmap resize)</h2>\n<p>: 큰 비트맵을 효율적으로 업로드 하기</p>\n<p>일반적으로 이미지는 UI 에 비해 크기가 크다. 제한된 메모리로 작업하는 경우 메모리에 저해상도 이미지를 로드하는 것이 유용하다.\n다음은 UI 의 크기와 일치하게 Bitmap 파일을 생성하는 과정이다.</p>\n<p><strong>비트맵 크기 및 유형 읽기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">loadBitmap</span><span class=\"token punctuation\">(</span>imageUrl<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> bmp<span class=\"token operator\">:</span> Bitmap<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>imageUrl<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> options <span class=\"token operator\">=</span> <span class=\"token function\">Options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n                inJustDecodeBounds <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">decodeStream</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            options<span class=\"token punctuation\">.</span>outHeight <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>height\n            options<span class=\"token punctuation\">.</span>outWidth <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>width\n            options<span class=\"token punctuation\">.</span>inSampleSize <span class=\"token operator\">=</span> <span class=\"token function\">calculateInSampleSize</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n            options<span class=\"token punctuation\">.</span>inJustDecodeBounds <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">decodeStream</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> MalformedURLException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> bmp\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>비트맵이 생성되면 메모리할당이 시도되어 OutOfMemory 가 발생 할  수 있다. inJustDecodeBounds 옵션을 활성화 시키면 비트맵이 메모리에 로드 되는 것을 막을 수 있다.</li>\n<li><code class=\"language-text\">inSampleSize</code> 을 설정하면 sample 사이즈를 설정 할 수 있다.</li>\n</ul>\n</br>\n<p><strong>축소버전 로드하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">calculateInSampleSize</span><span class=\"token punctuation\">(</span>\n        options<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">,</span>\n        reqWidth<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span>\n        reqHeight<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">160</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>height<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span> outHeight <span class=\"token keyword\">to</span> outWidth <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> inSampleSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">></span> reqHeight <span class=\"token operator\">||</span> width <span class=\"token operator\">></span> reqWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> halfHeight<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">val</span> halfWidth<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>halfHeight <span class=\"token operator\">/</span> inSampleSize <span class=\"token operator\">>=</span> reqHeight <span class=\"token operator\">&amp;&amp;</span> halfWidth <span class=\"token operator\">/</span> inSampleSize <span class=\"token operator\">>=</span> reqWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                inSampleSize <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> inSampleSize\n    <span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</br>\n</br>\n<hr>\n<p>면접에서 간간이 이미지 라이브러리의 동작 원리를 물어 보는 경우가 있어 해당 내용을 가볍게 정리해 본적이 있다. 하지만 실제로 구현까지 해보며 알게 된 것은 이미지 로딩에 비트맵 가공에서부터 메모리/디스크 캐시, 비동기 처리, 리사이징까지 다양한 기술이 적용된다는 것이다.</p>\n<p>무엇보다도 라이브러리 사용할 때, 이해를 바탕으로 활용 하는지도 알 수 있으니 면접 질문으로 손색이 없는 질문이지 않았나 싶다.</p>\n</br>\n<p><strong>ref</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/topic/performance/graphics/cache-bitmap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.android.com/topic/performance/graphics/cache-bitmap</a></li>\n<li><a href=\"https://developer.android.com/topic/performance/graphics/load-bitmap?hl=ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.android.com/topic/performance/graphics/load-bitmap?hl=ko</a></li>\n<li><a href=\"https://m.blog.naver.com/cg072/221479331086\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://m.blog.naver.com/cg072/221479331086</a></li>\n</ul>","timeToRead":7,"frontmatter":{"title":"라이브러리 없이 이미지 로드 구현하기","date":"April 03, 2022","description":"라이브러리 없이 이미지 로드 구현하기(Bitmap 이미지 캐싱)","tags":["ImageLoader","Bitmap","BitmapFactory","Cache","LRU"],"disqus":true},"fields":{"langKey":"ko"}}},"pageContext":{"slug":"/image-loader/","previous":{"fields":{"slug":"/compose-lifecycle/","langKey":"ko","directoryName":"blog"},"frontmatter":{"date":"April 10, 2022","title":"compose의 생명주기(Recomposition) 이해하기","tags":["compose","lifecycle","recomposition"]}},"next":{"fields":{"slug":"/retrospective/","langKey":"ko","directoryName":"blog"},"frontmatter":{"date":"January 02, 2022","title":"신입 개발자로 2021 되돌아보기","tags":["회고","2021"]}},"previousInSameTag":null,"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","1558996917","1615650028","3765107650"]}